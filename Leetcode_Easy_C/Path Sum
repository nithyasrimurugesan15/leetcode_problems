#include <stdio.h>
#include <stdbool.h>

// Definition for a binary tree node.
struct TreeNode {
    int val;
    struct TreeNode* left;
    struct TreeNode* right;
};

// Function to check if there is a root-to-leaf path with the given targetSum.
bool hasPathSum(struct TreeNode* root, int targetSum) {
    // Base case: If the root is NULL, there is no path.
    if (root == NULL) {
        return false;
    }

    // Check if this is a leaf node.
    if (root->left == NULL && root->right == NULL) {
        // Return true if the value of this leaf node matches the remaining target sum.
        return targetSum == root->val;
    }

    // Recursively check the left and right subtrees with the updated target sum.
    int remainingSum = targetSum - root->val;
    return hasPathSum(root->left, remainingSum) || hasPathSum(root->right, remainingSum);
}

// Helper function to create a new TreeNode.
struct TreeNode* createNode(int value) {
    struct TreeNode* newNode = (struct TreeNode*)malloc(sizeof(struct TreeNode));
    newNode->val = value;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

int main() {
    // Example 1: Constructing the tree [5,4,8,11,null,13,4,7,2,null,null,null,1]
    struct TreeNode* root = createNode(5);
    root->left = createNode(4);
    root->right = createNode(8);
    root->left->left = createNode(11);
    root->left->left->left = createNode(7);
    root->left->left->right = createNode(2);
    root->right->left = createNode(13);
    root->right->right = createNode(4);
    root->right->right->right = createNode(1);

    int targetSum = 22;

    // Check if the tree has a root-to-leaf path with the given sum.
    bool result = hasPathSum(root, targetSum);
    printf("Output: %s\n", result ? "true" : "false");

    // Free allocated memory (if applicable for larger test cases).
    return 0;
}
